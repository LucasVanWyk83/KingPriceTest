@page "/permissions"
@attribute [StreamRendering]
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Components.QuickGrid
@inject IHttpClientFactory ClientFactory

<PageTitle>Permissions</PageTitle>

<h1>Permissions</h1>

<p>This component demonstrates showing data.</p>

@if (getPermissionsError || permissions is null)
{
    <p>Unable to retrieve Permissions. Please try again later.</p>
}
else
{
	<div class="page-size-chooser">
		Items per page:
		<select @bind="@pagination.ItemsPerPage">
			<option>5</option>
			<option>10</option>
			<option>20</option>
			<option>50</option>
		</select>
	</div>
	
    <QuickGrid Items="@permissions" Pagination="@pagination">
		<TemplateColumn Title="Actions">
            <button @onclick="@(() => Edit(context))">Edit</button>
            <button @onclick="@(() => Delete(context))">Delete</button>
        </TemplateColumn>
		<PropertyColumn Property="@(p => p.Name)" Sortable="true" />
		<PropertyColumn Property="@(p => p.CreatedDateTime)" Format="yyyy-MM-dd" Sortable="true" />
		<PropertyColumn Property="@(p => p.UpdateDateTime)" Format="yyyy-MM-dd" Sortable="true" />
	</QuickGrid>
}

@code {
    private IEnumerable<Group>? permissions = [];
	PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private bool getPermissionssError;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    protected override async Task OnInitializedAsync()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            "https://api.github.com/repos/dotnet/AspNetCore.Docs/branches");
        request.Headers.Add("Accept", "application/vnd.github.v3+json");
        request.Headers.Add("User-Agent", "HttpClientFactory-Sample");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            permissions = await JsonSerializer.DeserializeAsync
                <IEnumerable<Permission>>(responseStream);
        }
        else
        {
            getPermissionsError = true;
        }

        shouldRender = true;
    }
	
	void Edit(Permission permission){
       
    }

    void Delete(Permission permission) 
	{
	
	}
    
	public class Permission
    {
        [JsonPropertyName("name")]
        public string? Name { get; set; }
		[JsonPropertyName("createdDateTime")]
		public DateTime CreatedDateTime { get; set; }
		[JsonPropertyName("updatedDateTime")]
		public DateTime? UpdatedDateTime { get; set; }
    }
}
